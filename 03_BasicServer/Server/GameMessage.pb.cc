// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class PLoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PLoginRequest>
      _instance;
} _PLoginRequest_default_instance_;
class PLoginRespondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PLoginRespond>
      _instance;
} _PLoginRespond_default_instance_;
class PActionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PActionRequest>
      _instance;
} _PActionRequest_default_instance_;
class PPlayerActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PPlayerAction>
      _instance;
} _PPlayerAction_default_instance_;
class PMoveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PMoveRequest>
      _instance;
} _PMoveRequest_default_instance_;
class PPlayerMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PPlayerMove>
      _instance;
} _PPlayerMove_default_instance_;
class PTurnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PTurnRequest>
      _instance;
} _PTurnRequest_default_instance_;
class PPlayerTurnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PPlayerTurn>
      _instance;
} _PPlayerTurn_default_instance_;
class PGameBeginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PGameBegin>
      _instance;
} _PGameBegin_default_instance_;
namespace protobuf_GameMessage_2eproto {
void InitDefaultsPLoginRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PLoginRequest_default_instance_;
    new (ptr) ::PLoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PLoginRequest::InitAsDefaultInstance();
}

void InitDefaultsPLoginRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPLoginRequestImpl);
}

void InitDefaultsPLoginRespondImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PLoginRespond_default_instance_;
    new (ptr) ::PLoginRespond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PLoginRespond::InitAsDefaultInstance();
}

void InitDefaultsPLoginRespond() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPLoginRespondImpl);
}

void InitDefaultsPActionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PActionRequest_default_instance_;
    new (ptr) ::PActionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PActionRequest::InitAsDefaultInstance();
}

void InitDefaultsPActionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPActionRequestImpl);
}

void InitDefaultsPPlayerActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PPlayerAction_default_instance_;
    new (ptr) ::PPlayerAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PPlayerAction::InitAsDefaultInstance();
}

void InitDefaultsPPlayerAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPPlayerActionImpl);
}

void InitDefaultsPMoveRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PMoveRequest_default_instance_;
    new (ptr) ::PMoveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PMoveRequest::InitAsDefaultInstance();
}

void InitDefaultsPMoveRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPMoveRequestImpl);
}

void InitDefaultsPPlayerMoveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PPlayerMove_default_instance_;
    new (ptr) ::PPlayerMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PPlayerMove::InitAsDefaultInstance();
}

void InitDefaultsPPlayerMove() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPPlayerMoveImpl);
}

void InitDefaultsPTurnRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PTurnRequest_default_instance_;
    new (ptr) ::PTurnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTurnRequest::InitAsDefaultInstance();
}

void InitDefaultsPTurnRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPTurnRequestImpl);
}

void InitDefaultsPPlayerTurnImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PPlayerTurn_default_instance_;
    new (ptr) ::PPlayerTurn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PPlayerTurn::InitAsDefaultInstance();
}

void InitDefaultsPPlayerTurn() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPPlayerTurnImpl);
}

void InitDefaultsPGameBeginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PGameBegin_default_instance_;
    new (ptr) ::PGameBegin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PGameBegin::InitAsDefaultInstance();
}

void InitDefaultsPGameBegin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPGameBeginImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRequest, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRespond, allowlogin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRespond, playernumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PLoginRespond, selfid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PActionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PActionRequest, actiontype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerAction, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerAction, actiontype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PMoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PMoveRequest, movetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PMoveRequest, movevalue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerMove, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerMove, movetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerMove, movevalue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PTurnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PTurnRequest, turntype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PTurnRequest, turnvalue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerTurn, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerTurn, turntype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PPlayerTurn, turnvalue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PGameBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PGameBegin, selfid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PLoginRequest)},
  { 7, -1, sizeof(::PLoginRespond)},
  { 15, -1, sizeof(::PActionRequest)},
  { 21, -1, sizeof(::PPlayerAction)},
  { 28, -1, sizeof(::PMoveRequest)},
  { 35, -1, sizeof(::PPlayerMove)},
  { 43, -1, sizeof(::PTurnRequest)},
  { 50, -1, sizeof(::PPlayerTurn)},
  { 58, -1, sizeof(::PGameBegin)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PLoginRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PActionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PPlayerAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PMoveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PPlayerMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PTurnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PPlayerTurn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PGameBegin_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "GameMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021GameMessage.proto\"3\n\rPLoginRequest\022\020\n\010"
      "UserName\030\001 \001(\t\022\020\n\010Password\030\002 \001(\t\"I\n\rPLog"
      "inRespond\022\022\n\nAllowLogin\030\001 \001(\r\022\024\n\014PlayerN"
      "umber\030\002 \001(\r\022\016\n\006SelfID\030\003 \001(\r\"$\n\016PActionRe"
      "quest\022\022\n\nActionType\030\001 \001(\r\"5\n\rPPlayerActi"
      "on\022\020\n\010PlayerID\030\001 \001(\r\022\022\n\nActionType\030\002 \001(\r"
      "\"3\n\014PMoveRequest\022\020\n\010MoveType\030\001 \001(\r\022\021\n\tMo"
      "veValue\030\002 \001(\002\"D\n\013PPlayerMove\022\020\n\010PlayerID"
      "\030\001 \001(\r\022\020\n\010MoveType\030\002 \001(\r\022\021\n\tMoveValue\030\003 "
      "\001(\002\"3\n\014PTurnRequest\022\020\n\010TurnType\030\001 \001(\r\022\021\n"
      "\tTurnValue\030\002 \001(\002\"D\n\013PPlayerTurn\022\020\n\010Playe"
      "rID\030\001 \001(\r\022\020\n\010TurnType\030\002 \001(\r\022\021\n\tTurnValue"
      "\030\003 \001(\002\"\034\n\nPGameBegin\022\016\n\006SelfID\030\001 \001(\rb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_GameMessage_2eproto

// ===================================================================

void PLoginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PLoginRequest::kUserNameFieldNumber;
const int PLoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PLoginRequest::PLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPLoginRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PLoginRequest)
}
PLoginRequest::PLoginRequest(const PLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:PLoginRequest)
}

void PLoginRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PLoginRequest::~PLoginRequest() {
  // @@protoc_insertion_point(destructor:PLoginRequest)
  SharedDtor();
}

void PLoginRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PLoginRequest::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PLoginRequest& PLoginRequest::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPLoginRequest();
  return *internal_default_instance();
}

PLoginRequest* PLoginRequest::New(::google::protobuf::Arena* arena) const {
  PLoginRequest* n = new PLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PLoginRequest.UserName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PLoginRequest.Password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PLoginRequest)
  return false;
#undef DO_
}

void PLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PLoginRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PLoginRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PLoginRequest)
}

::google::protobuf::uint8* PLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PLoginRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PLoginRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PLoginRequest)
  return target;
}

size_t PLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PLoginRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string UserName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PLoginRequest)
    MergeFrom(*source);
  }
}

void PLoginRequest::MergeFrom(const PLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void PLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLoginRequest::CopyFrom(const PLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLoginRequest::IsInitialized() const {
  return true;
}

void PLoginRequest::Swap(PLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PLoginRequest::InternalSwap(PLoginRequest* other) {
  using std::swap;
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PLoginRequest::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PLoginRespond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PLoginRespond::kAllowLoginFieldNumber;
const int PLoginRespond::kPlayerNumberFieldNumber;
const int PLoginRespond::kSelfIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PLoginRespond::PLoginRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPLoginRespond();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PLoginRespond)
}
PLoginRespond::PLoginRespond(const PLoginRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allowlogin_, &from.allowlogin_,
    static_cast<size_t>(reinterpret_cast<char*>(&selfid_) -
    reinterpret_cast<char*>(&allowlogin_)) + sizeof(selfid_));
  // @@protoc_insertion_point(copy_constructor:PLoginRespond)
}

void PLoginRespond::SharedCtor() {
  ::memset(&allowlogin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfid_) -
      reinterpret_cast<char*>(&allowlogin_)) + sizeof(selfid_));
  _cached_size_ = 0;
}

PLoginRespond::~PLoginRespond() {
  // @@protoc_insertion_point(destructor:PLoginRespond)
  SharedDtor();
}

void PLoginRespond::SharedDtor() {
}

void PLoginRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PLoginRespond::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PLoginRespond& PLoginRespond::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPLoginRespond();
  return *internal_default_instance();
}

PLoginRespond* PLoginRespond::New(::google::protobuf::Arena* arena) const {
  PLoginRespond* n = new PLoginRespond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PLoginRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:PLoginRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allowlogin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfid_) -
      reinterpret_cast<char*>(&allowlogin_)) + sizeof(selfid_));
  _internal_metadata_.Clear();
}

bool PLoginRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PLoginRespond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 AllowLogin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowlogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 PlayerNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playernumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SelfID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PLoginRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PLoginRespond)
  return false;
#undef DO_
}

void PLoginRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PLoginRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AllowLogin = 1;
  if (this->allowlogin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allowlogin(), output);
  }

  // uint32 PlayerNumber = 2;
  if (this->playernumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playernumber(), output);
  }

  // uint32 SelfID = 3;
  if (this->selfid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selfid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PLoginRespond)
}

::google::protobuf::uint8* PLoginRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PLoginRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AllowLogin = 1;
  if (this->allowlogin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allowlogin(), target);
  }

  // uint32 PlayerNumber = 2;
  if (this->playernumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playernumber(), target);
  }

  // uint32 SelfID = 3;
  if (this->selfid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selfid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PLoginRespond)
  return target;
}

size_t PLoginRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PLoginRespond)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 AllowLogin = 1;
  if (this->allowlogin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allowlogin());
  }

  // uint32 PlayerNumber = 2;
  if (this->playernumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playernumber());
  }

  // uint32 SelfID = 3;
  if (this->selfid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selfid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLoginRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PLoginRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const PLoginRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PLoginRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PLoginRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PLoginRespond)
    MergeFrom(*source);
  }
}

void PLoginRespond::MergeFrom(const PLoginRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PLoginRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allowlogin() != 0) {
    set_allowlogin(from.allowlogin());
  }
  if (from.playernumber() != 0) {
    set_playernumber(from.playernumber());
  }
  if (from.selfid() != 0) {
    set_selfid(from.selfid());
  }
}

void PLoginRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PLoginRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLoginRespond::CopyFrom(const PLoginRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PLoginRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLoginRespond::IsInitialized() const {
  return true;
}

void PLoginRespond::Swap(PLoginRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PLoginRespond::InternalSwap(PLoginRespond* other) {
  using std::swap;
  swap(allowlogin_, other->allowlogin_);
  swap(playernumber_, other->playernumber_);
  swap(selfid_, other->selfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PLoginRespond::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PActionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PActionRequest::kActionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PActionRequest::PActionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPActionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PActionRequest)
}
PActionRequest::PActionRequest(const PActionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actiontype_ = from.actiontype_;
  // @@protoc_insertion_point(copy_constructor:PActionRequest)
}

void PActionRequest::SharedCtor() {
  actiontype_ = 0u;
  _cached_size_ = 0;
}

PActionRequest::~PActionRequest() {
  // @@protoc_insertion_point(destructor:PActionRequest)
  SharedDtor();
}

void PActionRequest::SharedDtor() {
}

void PActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PActionRequest::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PActionRequest& PActionRequest::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPActionRequest();
  return *internal_default_instance();
}

PActionRequest* PActionRequest::New(::google::protobuf::Arena* arena) const {
  PActionRequest* n = new PActionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PActionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actiontype_ = 0u;
  _internal_metadata_.Clear();
}

bool PActionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PActionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ActionType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PActionRequest)
  return false;
#undef DO_
}

void PActionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PActionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ActionType = 1;
  if (this->actiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actiontype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PActionRequest)
}

::google::protobuf::uint8* PActionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PActionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ActionType = 1;
  if (this->actiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actiontype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PActionRequest)
  return target;
}

size_t PActionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PActionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 ActionType = 1;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actiontype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PActionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PActionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PActionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PActionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PActionRequest)
    MergeFrom(*source);
  }
}

void PActionRequest::MergeFrom(const PActionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actiontype() != 0) {
    set_actiontype(from.actiontype());
  }
}

void PActionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActionRequest::CopyFrom(const PActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActionRequest::IsInitialized() const {
  return true;
}

void PActionRequest::Swap(PActionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PActionRequest::InternalSwap(PActionRequest* other) {
  using std::swap;
  swap(actiontype_, other->actiontype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PActionRequest::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PPlayerAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PPlayerAction::kPlayerIDFieldNumber;
const int PPlayerAction::kActionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PPlayerAction::PPlayerAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPPlayerAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PPlayerAction)
}
PPlayerAction::PPlayerAction(const PPlayerAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actiontype_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(actiontype_));
  // @@protoc_insertion_point(copy_constructor:PPlayerAction)
}

void PPlayerAction::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actiontype_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(actiontype_));
  _cached_size_ = 0;
}

PPlayerAction::~PPlayerAction() {
  // @@protoc_insertion_point(destructor:PPlayerAction)
  SharedDtor();
}

void PPlayerAction::SharedDtor() {
}

void PPlayerAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PPlayerAction::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PPlayerAction& PPlayerAction::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPPlayerAction();
  return *internal_default_instance();
}

PPlayerAction* PPlayerAction::New(::google::protobuf::Arena* arena) const {
  PPlayerAction* n = new PPlayerAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PPlayerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:PPlayerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actiontype_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(actiontype_));
  _internal_metadata_.Clear();
}

bool PPlayerAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PPlayerAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 PlayerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ActionType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PPlayerAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PPlayerAction)
  return false;
#undef DO_
}

void PPlayerAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PPlayerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // uint32 ActionType = 2;
  if (this->actiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actiontype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PPlayerAction)
}

::google::protobuf::uint8* PPlayerAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PPlayerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // uint32 ActionType = 2;
  if (this->actiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actiontype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PPlayerAction)
  return target;
}

size_t PPlayerAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PPlayerAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 ActionType = 2;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actiontype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PPlayerAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PPlayerAction)
  GOOGLE_DCHECK_NE(&from, this);
  const PPlayerAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PPlayerAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PPlayerAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PPlayerAction)
    MergeFrom(*source);
  }
}

void PPlayerAction::MergeFrom(const PPlayerAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PPlayerAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.actiontype() != 0) {
    set_actiontype(from.actiontype());
  }
}

void PPlayerAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PPlayerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPlayerAction::CopyFrom(const PPlayerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PPlayerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPlayerAction::IsInitialized() const {
  return true;
}

void PPlayerAction::Swap(PPlayerAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PPlayerAction::InternalSwap(PPlayerAction* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(actiontype_, other->actiontype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PPlayerAction::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PMoveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMoveRequest::kMoveTypeFieldNumber;
const int PMoveRequest::kMoveValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMoveRequest::PMoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPMoveRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PMoveRequest)
}
PMoveRequest::PMoveRequest(const PMoveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&movetype_, &from.movetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&movevalue_) -
    reinterpret_cast<char*>(&movetype_)) + sizeof(movevalue_));
  // @@protoc_insertion_point(copy_constructor:PMoveRequest)
}

void PMoveRequest::SharedCtor() {
  ::memset(&movetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movevalue_) -
      reinterpret_cast<char*>(&movetype_)) + sizeof(movevalue_));
  _cached_size_ = 0;
}

PMoveRequest::~PMoveRequest() {
  // @@protoc_insertion_point(destructor:PMoveRequest)
  SharedDtor();
}

void PMoveRequest::SharedDtor() {
}

void PMoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMoveRequest::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PMoveRequest& PMoveRequest::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPMoveRequest();
  return *internal_default_instance();
}

PMoveRequest* PMoveRequest::New(::google::protobuf::Arena* arena) const {
  PMoveRequest* n = new PMoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PMoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&movetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movevalue_) -
      reinterpret_cast<char*>(&movetype_)) + sizeof(movevalue_));
  _internal_metadata_.Clear();
}

bool PMoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PMoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 MoveType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MoveValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PMoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PMoveRequest)
  return false;
#undef DO_
}

void PMoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PMoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MoveType = 1;
  if (this->movetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->movetype(), output);
  }

  // float MoveValue = 2;
  if (this->movevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->movevalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PMoveRequest)
}

::google::protobuf::uint8* PMoveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PMoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MoveType = 1;
  if (this->movetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->movetype(), target);
  }

  // float MoveValue = 2;
  if (this->movevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->movevalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PMoveRequest)
  return target;
}

size_t PMoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PMoveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 MoveType = 1;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->movetype());
  }

  // float MoveValue = 2;
  if (this->movevalue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PMoveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PMoveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PMoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PMoveRequest)
    MergeFrom(*source);
  }
}

void PMoveRequest::MergeFrom(const PMoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.movetype() != 0) {
    set_movetype(from.movetype());
  }
  if (from.movevalue() != 0) {
    set_movevalue(from.movevalue());
  }
}

void PMoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMoveRequest::CopyFrom(const PMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMoveRequest::IsInitialized() const {
  return true;
}

void PMoveRequest::Swap(PMoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMoveRequest::InternalSwap(PMoveRequest* other) {
  using std::swap;
  swap(movetype_, other->movetype_);
  swap(movevalue_, other->movevalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PMoveRequest::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PPlayerMove::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PPlayerMove::kPlayerIDFieldNumber;
const int PPlayerMove::kMoveTypeFieldNumber;
const int PPlayerMove::kMoveValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PPlayerMove::PPlayerMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPPlayerMove();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PPlayerMove)
}
PPlayerMove::PPlayerMove(const PPlayerMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&movevalue_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(movevalue_));
  // @@protoc_insertion_point(copy_constructor:PPlayerMove)
}

void PPlayerMove::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movevalue_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(movevalue_));
  _cached_size_ = 0;
}

PPlayerMove::~PPlayerMove() {
  // @@protoc_insertion_point(destructor:PPlayerMove)
  SharedDtor();
}

void PPlayerMove::SharedDtor() {
}

void PPlayerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PPlayerMove::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PPlayerMove& PPlayerMove::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPPlayerMove();
  return *internal_default_instance();
}

PPlayerMove* PPlayerMove::New(::google::protobuf::Arena* arena) const {
  PPlayerMove* n = new PPlayerMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:PPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movevalue_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(movevalue_));
  _internal_metadata_.Clear();
}

bool PPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PPlayerMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 PlayerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MoveType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MoveValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PPlayerMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PPlayerMove)
  return false;
#undef DO_
}

void PPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // uint32 MoveType = 2;
  if (this->movetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->movetype(), output);
  }

  // float MoveValue = 3;
  if (this->movevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->movevalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PPlayerMove)
}

::google::protobuf::uint8* PPlayerMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // uint32 MoveType = 2;
  if (this->movetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->movetype(), target);
  }

  // float MoveValue = 3;
  if (this->movevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->movevalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PPlayerMove)
  return target;
}

size_t PPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PPlayerMove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 MoveType = 2;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->movetype());
  }

  // float MoveValue = 3;
  if (this->movevalue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const PPlayerMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PPlayerMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PPlayerMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PPlayerMove)
    MergeFrom(*source);
  }
}

void PPlayerMove::MergeFrom(const PPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.movetype() != 0) {
    set_movetype(from.movetype());
  }
  if (from.movevalue() != 0) {
    set_movevalue(from.movevalue());
  }
}

void PPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPlayerMove::CopyFrom(const PPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPlayerMove::IsInitialized() const {
  return true;
}

void PPlayerMove::Swap(PPlayerMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PPlayerMove::InternalSwap(PPlayerMove* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(movetype_, other->movetype_);
  swap(movevalue_, other->movevalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PPlayerMove::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PTurnRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTurnRequest::kTurnTypeFieldNumber;
const int PTurnRequest::kTurnValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTurnRequest::PTurnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPTurnRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTurnRequest)
}
PTurnRequest::PTurnRequest(const PTurnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turntype_, &from.turntype_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnvalue_) -
    reinterpret_cast<char*>(&turntype_)) + sizeof(turnvalue_));
  // @@protoc_insertion_point(copy_constructor:PTurnRequest)
}

void PTurnRequest::SharedCtor() {
  ::memset(&turntype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnvalue_) -
      reinterpret_cast<char*>(&turntype_)) + sizeof(turnvalue_));
  _cached_size_ = 0;
}

PTurnRequest::~PTurnRequest() {
  // @@protoc_insertion_point(destructor:PTurnRequest)
  SharedDtor();
}

void PTurnRequest::SharedDtor() {
}

void PTurnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTurnRequest::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PTurnRequest& PTurnRequest::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPTurnRequest();
  return *internal_default_instance();
}

PTurnRequest* PTurnRequest::New(::google::protobuf::Arena* arena) const {
  PTurnRequest* n = new PTurnRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTurnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PTurnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turntype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnvalue_) -
      reinterpret_cast<char*>(&turntype_)) + sizeof(turnvalue_));
  _internal_metadata_.Clear();
}

bool PTurnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PTurnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 TurnType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turntype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TurnValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTurnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTurnRequest)
  return false;
#undef DO_
}

void PTurnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTurnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 TurnType = 1;
  if (this->turntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->turntype(), output);
  }

  // float TurnValue = 2;
  if (this->turnvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->turnvalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PTurnRequest)
}

::google::protobuf::uint8* PTurnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PTurnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 TurnType = 1;
  if (this->turntype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->turntype(), target);
  }

  // float TurnValue = 2;
  if (this->turnvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->turnvalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTurnRequest)
  return target;
}

size_t PTurnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTurnRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 TurnType = 1;
  if (this->turntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turntype());
  }

  // float TurnValue = 2;
  if (this->turnvalue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTurnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PTurnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PTurnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PTurnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PTurnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PTurnRequest)
    MergeFrom(*source);
  }
}

void PTurnRequest::MergeFrom(const PTurnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTurnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turntype() != 0) {
    set_turntype(from.turntype());
  }
  if (from.turnvalue() != 0) {
    set_turnvalue(from.turnvalue());
  }
}

void PTurnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PTurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTurnRequest::CopyFrom(const PTurnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTurnRequest::IsInitialized() const {
  return true;
}

void PTurnRequest::Swap(PTurnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTurnRequest::InternalSwap(PTurnRequest* other) {
  using std::swap;
  swap(turntype_, other->turntype_);
  swap(turnvalue_, other->turnvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PTurnRequest::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PPlayerTurn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PPlayerTurn::kPlayerIDFieldNumber;
const int PPlayerTurn::kTurnTypeFieldNumber;
const int PPlayerTurn::kTurnValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PPlayerTurn::PPlayerTurn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPPlayerTurn();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PPlayerTurn)
}
PPlayerTurn::PPlayerTurn(const PPlayerTurn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnvalue_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(turnvalue_));
  // @@protoc_insertion_point(copy_constructor:PPlayerTurn)
}

void PPlayerTurn::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnvalue_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(turnvalue_));
  _cached_size_ = 0;
}

PPlayerTurn::~PPlayerTurn() {
  // @@protoc_insertion_point(destructor:PPlayerTurn)
  SharedDtor();
}

void PPlayerTurn::SharedDtor() {
}

void PPlayerTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PPlayerTurn::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PPlayerTurn& PPlayerTurn::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPPlayerTurn();
  return *internal_default_instance();
}

PPlayerTurn* PPlayerTurn::New(::google::protobuf::Arena* arena) const {
  PPlayerTurn* n = new PPlayerTurn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PPlayerTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:PPlayerTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnvalue_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(turnvalue_));
  _internal_metadata_.Clear();
}

bool PPlayerTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PPlayerTurn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 PlayerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TurnType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turntype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TurnValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PPlayerTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PPlayerTurn)
  return false;
#undef DO_
}

void PPlayerTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PPlayerTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // uint32 TurnType = 2;
  if (this->turntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->turntype(), output);
  }

  // float TurnValue = 3;
  if (this->turnvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->turnvalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PPlayerTurn)
}

::google::protobuf::uint8* PPlayerTurn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PPlayerTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // uint32 TurnType = 2;
  if (this->turntype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->turntype(), target);
  }

  // float TurnValue = 3;
  if (this->turnvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->turnvalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PPlayerTurn)
  return target;
}

size_t PPlayerTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PPlayerTurn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 TurnType = 2;
  if (this->turntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turntype());
  }

  // float TurnValue = 3;
  if (this->turnvalue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PPlayerTurn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PPlayerTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const PPlayerTurn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PPlayerTurn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PPlayerTurn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PPlayerTurn)
    MergeFrom(*source);
  }
}

void PPlayerTurn::MergeFrom(const PPlayerTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PPlayerTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.turntype() != 0) {
    set_turntype(from.turntype());
  }
  if (from.turnvalue() != 0) {
    set_turnvalue(from.turnvalue());
  }
}

void PPlayerTurn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PPlayerTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPlayerTurn::CopyFrom(const PPlayerTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PPlayerTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPlayerTurn::IsInitialized() const {
  return true;
}

void PPlayerTurn::Swap(PPlayerTurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PPlayerTurn::InternalSwap(PPlayerTurn* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(turntype_, other->turntype_);
  swap(turnvalue_, other->turnvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PPlayerTurn::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PGameBegin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PGameBegin::kSelfIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PGameBegin::PGameBegin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameMessage_2eproto::InitDefaultsPGameBegin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PGameBegin)
}
PGameBegin::PGameBegin(const PGameBegin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selfid_ = from.selfid_;
  // @@protoc_insertion_point(copy_constructor:PGameBegin)
}

void PGameBegin::SharedCtor() {
  selfid_ = 0u;
  _cached_size_ = 0;
}

PGameBegin::~PGameBegin() {
  // @@protoc_insertion_point(destructor:PGameBegin)
  SharedDtor();
}

void PGameBegin::SharedDtor() {
}

void PGameBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGameBegin::descriptor() {
  ::protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PGameBegin& PGameBegin::default_instance() {
  ::protobuf_GameMessage_2eproto::InitDefaultsPGameBegin();
  return *internal_default_instance();
}

PGameBegin* PGameBegin::New(::google::protobuf::Arena* arena) const {
  PGameBegin* n = new PGameBegin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PGameBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:PGameBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selfid_ = 0u;
  _internal_metadata_.Clear();
}

bool PGameBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PGameBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SelfID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PGameBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PGameBegin)
  return false;
#undef DO_
}

void PGameBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PGameBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SelfID = 1;
  if (this->selfid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PGameBegin)
}

::google::protobuf::uint8* PGameBegin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PGameBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SelfID = 1;
  if (this->selfid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PGameBegin)
  return target;
}

size_t PGameBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PGameBegin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SelfID = 1;
  if (this->selfid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selfid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGameBegin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PGameBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const PGameBegin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PGameBegin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PGameBegin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PGameBegin)
    MergeFrom(*source);
  }
}

void PGameBegin::MergeFrom(const PGameBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PGameBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.selfid() != 0) {
    set_selfid(from.selfid());
  }
}

void PGameBegin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PGameBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGameBegin::CopyFrom(const PGameBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PGameBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGameBegin::IsInitialized() const {
  return true;
}

void PGameBegin::Swap(PGameBegin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PGameBegin::InternalSwap(PGameBegin* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PGameBegin::GetMetadata() const {
  protobuf_GameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
